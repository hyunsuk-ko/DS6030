source(system.file("config/hw_config.R", package="R6030")) # knitr settings
data.dir = 'https://mdporter.github.io/DS6030/data/' # data directory
library(R6030)     # functions for DS-6030
library(tidyverse) # functions for data manipulation
sim_x <- function(n) runif(n, min = 0, max = 1)
sim_y <- function(x, sd){               # generate Y|X from N{f(x),sd}
n = length(x)
f <- function(x) 1 + 2 * x + 5 * sin(5 * x)
f(x) + rnorm(n, mean = 0 , sd = 2.5)  # error
}
set.seed(211)
n <- 100
x <- sim_x(n)    # get x values
y <- sim_y(x)
data_train <- tibble(x, y)               # training data tibble
gg_myplot <- ggplot(data_train, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
gg_myplot
xseq <- x
xeval <- tibble(x = xseq)
m5 <- lm(y~poly(x, degree=5), data = data_train)
yhat5 <- predict(m3, newdata =xeval)
xseq <- x
xeval <- tibble(x = xseq)
m5 <- lm(y~poly(x, degree=5), data = data_train)
yhat5 <- predict(m5, newdata =xeval)
fifth.data <- tibble(x = xseq, fifth = yhat5) %>%  # long data
pivot_longer(-x, names_to="model", values_to="y")
gg_myplot +
geom_line(data=fifth.data, aes(color=model))
set.seed(212)
n <- length(x) # length of observed data
M <- 200 # numbver of bootstrap samples
p <- numeric(M) # initialize vector for test statistic
for (m in 1:M) {
ind = sample(n, replace = TRUE)  # sample indices with replacement
xboot = x[ind]                   # bootstrap sample
p[m] = mean(xboot)
}
p[1]
set.seed(212)
n <- length(x) # length of observed data
M <- 200 # numbver of bootstrap samples
p <- numeric(M) # initialize vector for test statistic
for (m in 1:M) {
ind = sample(n, replace = TRUE)  # sample indices with replacement
xboot = x[ind]                   # bootstrap sample
p[m] = mean(xboot)
}
p[2]
quantile(p, probs = c(.025, .975)) # 95% bootstrap interval
set.seed(212)
n <- length(x) # length of observed data
M <- 200 # numbver of bootstrap samples
p <- numeric(M) # initialize vector for test statistic
data_eval<- tibble(x = seq(0,2,length=100))
YHAT <- matrix(NA, nrow(data_eval), M)
for (m in 1:M) {
ind = sample(n, replace = TRUE)  # sample indices with replacement
xboot = x[ind]                   # bootstrap sample
m_boot = lm(y ~ bs(x, df = 5, Boundary.knots = kts_bdry)-1, data = data_train[ind,]) # fit bootstrap data
# predict from bootstrap model
YHAT[,m] = predict(m_boot, data_eval)
}
